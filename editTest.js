// Generated by Selenium IDE
// const { Builder, By, Key, until } = require('selenium-webdriver')


const assert = require('assert')
const {Builder,until,By} = require("selenium-webdriver");
const chromeDriver = require("selenium-webdriver/chrome");

//npx mocha --parallel editTest.js
describe('EditTest', function() {
  this.timeout(50000)
  let driver
  let vars
  const chromeOptions = new chromeDriver.Options();
  //chrome 브라우저 옵션
  // chromeOptions.addArguments("--headless");
  // chromeOptions.addArguments("--disable-gpu");
  // chromeOptions.addArguments("--no-sandbox");
  // beforeEach(async function() {
  before(async function() {
    driver = await new Builder().forBrowser('chrome')
        .setChromeOptions(chromeOptions)
        .build()
    vars = {}
    await driver.get("http://todo.wooyu.world/")
    // await driver.get("http://localhost:8181/")
  })
  // afterEach(async function() {
  after(async function() {
    await driver.quit();
  })

// describe('EditTest', function() {
//   this.timeout(30000)
//   let driver
//   let vars
//   beforeEach(async function() {
//     driver = await new Builder().forBrowser('chrome').build()
//     vars = {}
//   })
//   afterEach(async function() {
//     await driver.quit();
//   })
  it('TC00000028', async function() {

    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // 모달 나타날 때까지 기다림
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title28")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(2000);

    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 3000)
    await driver.sleep(3000);

    await driver.navigate().refresh();
    await driver.sleep(2000);
    await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".card-body"))), 3000)

    // statusbtn 클릭
    await driver.findElement(By.css(".dropdown-toggle")).click()
    await driver.wait(until.elementLocated(By.css("ul.dropdown-menu.dropdown-menu-dark.show")), 2000)

    assert(await driver.findElement(By.css("ul.dropdown-menu.dropdown-menu-dark.show li:nth-child(1) .dropdown-item")).getText() == "대기중")
    assert(await driver.findElement(By.css("ul.dropdown-menu.dropdown-menu-dark.show li:nth-child(2) .dropdown-item")).getText() == "진행중")
    assert(await driver.findElement(By.css("ul.dropdown-menu.dropdown-menu-dark.show li:nth-child(3) .dropdown-item")).getText() == "완료")
    // //대기중 active 인지
    assert(await driver.findElement(By.css("a.dropdown-item.active")).getText() == "대기중")
    await driver.findElement(By.linkText("진행중")).click()
    await driver.sleep(3000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "진행중")
    await driver.sleep(3000);
    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000029', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // 모달 나타날 때까지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title29")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(3000);
    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 30000)

    await driver.navigate().refresh();
    await driver.sleep(3000);
    // statusbtn 클릭
    await driver.findElement(By.css(".dropdown-toggle")).click()
    await driver.wait(until.elementLocated(By.css("ul.dropdown-menu.dropdown-menu-dark.show")), 2000)

    assert(await driver.findElement(By.css("ul.dropdown-menu.dropdown-menu-dark.show li:nth-child(1) .dropdown-item")).getText() == "대기중")
    assert(await driver.findElement(By.css("ul.dropdown-menu.dropdown-menu-dark.show li:nth-child(2) .dropdown-item")).getText() == "진행중")
    assert(await driver.findElement(By.css("ul.dropdown-menu.dropdown-menu-dark.show li:nth-child(3) .dropdown-item")).getText() == "완료")
    // //대기중 active 인지
    assert(await driver.findElement(By.css("a.dropdown-item.active")).getText() == "대기중")
    await driver.findElement(By.linkText("완료")).click()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "완료")

    //삭제 하기
    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000030', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title30")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(3000);
    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 3000)


    await driver.navigate().refresh();
    await driver.sleep(3000);
    await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".card-body"))), 3000)
    // status 버튼 클릭
    await driver.findElement(By.css(".dropdown-toggle")).click()
    await driver.sleep(1000);
    // //여기까지 전제조건
    await driver.findElement(By.linkText("진행중")).click()
    await driver.sleep(1000);

    // status 버튼 클릭
    await driver.findElement(By.css(".dropdown-toggle")).click()
    await driver.sleep(1000);
    await driver.wait(until.elementLocated(By.css("ul.dropdown-menu.dropdown-menu-dark.show")), 2000)

    assert(await driver.findElement(By.css("ul.dropdown-menu.dropdown-menu-dark.show li:nth-child(1) .dropdown-item")).getText() == "대기중")
    assert(await driver.findElement(By.css("ul.dropdown-menu.dropdown-menu-dark.show li:nth-child(2) .dropdown-item")).getText() == "진행중")
    assert(await driver.findElement(By.css("ul.dropdown-menu.dropdown-menu-dark.show li:nth-child(3) .dropdown-item")).getText() == "완료")

    // //진행중active 인지
    assert(await driver.findElement(By.css("a.dropdown-item.active")).getText() == "진행중")
    await driver.findElement(By.linkText("대기중")).click()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "대기중")

    //삭제 하기
    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000031', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title31")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(3000);
    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 30000)

    await driver.navigate().refresh();
    await driver.sleep(3000);

    await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".card-body"))), 3000)
    await driver.findElement(By.css(".dropdown-toggle")).click()
    // //여기까지 전제조건
    await driver.findElement(By.linkText("진행중")).click()
    await driver.sleep(1000);

    // //"진행중"상태의 status 버튼 클릭
    await driver.findElement(By.css(".dropdown-toggle")).click()
    await driver.wait(until.elementLocated(By.css("ul.dropdown-menu.dropdown-menu-dark.show")), 2000)

    assert(await driver.findElement(By.css("ul.dropdown-menu.dropdown-menu-dark.show li:nth-child(1) .dropdown-item")).getText() == "대기중")
    assert(await driver.findElement(By.css("ul.dropdown-menu.dropdown-menu-dark.show li:nth-child(2) .dropdown-item")).getText() == "진행중")
    assert(await driver.findElement(By.css("ul.dropdown-menu.dropdown-menu-dark.show li:nth-child(3) .dropdown-item")).getText() == "완료")
    // //진행중 active 인지
    assert(await driver.findElement(By.css("a.dropdown-item.active")).getText() == "진행중")
    await driver.findElement(By.linkText("완료")).click()
    await driver.sleep(1000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "완료")

    //삭제 하기
    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000032', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title32")
    await driver.findElement(By.id("addDate")).click()
    await driver.sleep(1000);
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(3000);
    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 5000)
    await driver.navigate().refresh();
    await driver.sleep(3000);


    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".dropdown-toggle")), '대기중'), 5000)
    await driver.findElement(By.css(".dropdown-toggle")).click()
    // //여기까지 전제조건
    await driver.findElement(By.linkText("완료")).click()
    await driver.sleep(1000);

    // //"완료"상태의 status 버튼 클릭
    await driver.findElement(By.css(".dropdown-toggle")).click()
    await driver.wait(until.elementLocated(By.css("ul.dropdown-menu.dropdown-menu-dark.show")), 2000)
    
    assert(await driver.findElement(By.css("ul.dropdown-menu.dropdown-menu-dark.show li:nth-child(1) .dropdown-item")).getText() == "대기중")
    assert(await driver.findElement(By.css("ul.dropdown-menu.dropdown-menu-dark.show li:nth-child(2) .dropdown-item")).getText() == "진행중")
    assert(await driver.findElement(By.css("ul.dropdown-menu.dropdown-menu-dark.show li:nth-child(3) .dropdown-item")).getText() == "완료")
    
    // //완료 active 인지
    assert(await driver.findElement(By.css("a.dropdown-item.active")).getText() == "완료")
    await driver.findElement(By.linkText("대기중")).click()
    await driver.sleep(1000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "대기중")
    //삭제 하기
    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000033', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title33")
    await driver.findElement(By.id("addDate")).click()
    await driver.sleep(1000);
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(3000);
    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 5000)

    await driver.navigate().refresh();
    await driver.sleep(3000);

    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".dropdown-toggle")), '대기중'), 5000)
    await driver.findElement(By.css(".dropdown-toggle")).click()
    // //여기까지 전제조건
    await driver.findElement(By.linkText("완료")).click()
    await driver.sleep(1000);

    // //"완료"상태의 status 버튼 클릭
    await driver.findElement(By.css(".dropdown-toggle")).click()
    await driver.wait(until.elementLocated(By.css("ul.dropdown-menu.dropdown-menu-dark.show")), 2000)

    assert(await driver.findElement(By.css("ul.dropdown-menu.dropdown-menu-dark.show li:nth-child(1) .dropdown-item")).getText() == "대기중")
    assert(await driver.findElement(By.css("ul.dropdown-menu.dropdown-menu-dark.show li:nth-child(2) .dropdown-item")).getText() == "진행중")
    assert(await driver.findElement(By.css("ul.dropdown-menu.dropdown-menu-dark.show li:nth-child(3) .dropdown-item")).getText() == "완료")
    // //완료 active 인지
    assert(await driver.findElement(By.css("a.dropdown-item.active")).getText() == "완료")
    await driver.findElement(By.linkText("진행중")).click()
    await driver.sleep(1000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "진행중")

    //삭제 하기
    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000034', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title34")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).sendKeys("test content34")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(3000);
    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 5000)

    await driver.navigate().refresh();
    await driver.sleep(3000);
    await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".card-body"))), 3000)
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "대기중")
    assert(await driver.findElement(By.css("span")).getText() == "test title34")
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)

    vars["TitleValue"] = await driver.findElement(By.id("exampleModalLabel")).getAttribute("value")
    vars["ContentValue"] = await driver.findElement(By.id("ModalContent")).getAttribute("value")
    vars["DateValue"] = await driver.findElement(By.id("addDate")).getAttribute("value")

    assert(vars["TitleValue"].toString() == "test title34")
    assert(vars["ContentValue"].toString() == "test content34")
    assert(vars["DateValue"].toString() == "2024-03-06")


    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).clear(); // 기존 텍스트를 클리어
    await driver.sleep(1000);
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("Edit title34")
    await driver.findElement(By.id("modalSaveBtn")).click()
    assert(await driver.switchTo().alert().getText() == "저장하시겠습니까?")
    await driver.switchTo().alert().accept()
    await driver.sleep(3000);

    await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".card-body"))), 3000)
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "대기중")
    assert(await driver.findElement(By.css("span:nth-child(3)")).getText() == "Edit title34")
    // //수정 버튼 클릭
    await driver.navigate().refresh();
    await driver.sleep(3000);
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.sleep(3000);


    vars["ChangeTitleValue"] = await driver.findElement(By.id("exampleModalLabel")).getAttribute("value")
    assert(vars["ChangeTitleValue"].toString() == "Edit title34")
    assert(vars["ContentValue"].toString() == "test content34")
    assert(vars["DateValue"].toString() == "2024-03-06")

    // var EditValue = await driver.findElement(By.id("exampleModalLabel")).getAttribute("value")
    // assert(EditValue == "Edit title34")


    await driver.findElement(By.css(".btn-close")).click()
    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000035', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title35")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).sendKeys("test content35")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(3000);
    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 30000)
    await driver.navigate().refresh();
    await driver.sleep(3000);
    await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".card-body"))), 5000)
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "대기중")
    // //여기까지 전제조건
    assert(await driver.findElement(By.css("span")).getText() == "test title35")
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    await driver.sleep(3000);
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-07")
    await driver.findElement(By.id("modalSaveBtn")).click()
    assert(await driver.switchTo().alert().getText() == "저장하시겠습니까?")
    await driver.switchTo().alert().accept()
    await driver.sleep(3000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "대기중")
    assert(await driver.findElement(By.css("span")).getText() == "test title35")
    await driver.sleep(3000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)

    vars["TitleValue"] = await driver.findElement(By.id("exampleModalLabel")).getAttribute("value")
    vars["ContentValue"] = await driver.findElement(By.id("ModalContent")).getAttribute("value")
    vars["DateValue"] = await driver.findElement(By.id("addDate")).getAttribute("value")
    assert(vars["TitleValue"].toString() == "test title35")
    assert(vars["ContentValue"].toString() == "test content35")
    assert(vars["DateValue"].toString() == "2024-03-07")

    await driver.findElement(By.css(".btn-close")).click()
    await driver.sleep(3000);

    //삭제 하기
    await driver.navigate().refresh();
    await driver.sleep(3000);
    // await driver.wait(until.elementIsVisible(await driver.findElement(By.name("deleteBtn"))), 5000)
    await driver.findElement(By.css(".deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000036', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title36")
    await driver.findElement(By.id("addDate")).click()
    await driver.sleep(1000);
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).sendKeys("test content36")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(3000);
    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 3000)

    await driver.navigate().refresh();
    await driver.sleep(3000);

    await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".card-body"))), 3000)
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "대기중")
    // //여기까지 전제조건
    assert(await driver.findElement(By.css("span")).getText() == "test title36")
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).clear(); // 기존 텍스트를 클리어
    await driver.sleep(3000);
    await driver.findElement(By.id("ModalContent")).sendKeys("Edit content36")
    await driver.findElement(By.id("modalSaveBtn")).click()
    assert(await driver.switchTo().alert().getText() == "저장하시겠습니까?")
    await driver.switchTo().alert().accept()
    await driver.sleep(3000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "대기중")
    assert(await driver.findElement(By.css("span")).getText() == "test title36")
    await driver.sleep(3000);

    await driver.navigate().refresh();
    await driver.sleep(3000);

    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)

    vars["TitleValue"] = await driver.findElement(By.id("exampleModalLabel")).getAttribute("value")
    vars["ContentValue"] = await driver.findElement(By.id("ModalContent")).getAttribute("value")
    vars["DateValue"] = await driver.findElement(By.id("addDate")).getAttribute("value")
    assert(vars["TitleValue"].toString() == "test title36")
    assert(vars["ContentValue"].toString() == "Edit content36")
    assert(vars["DateValue"].toString() == "2024-03-06")

    await driver.findElement(By.css(".btn-close")).click()
    await driver.navigate().refresh();
    await driver.sleep(3000);
    //삭제 하기
    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000037', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title37")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).sendKeys("test content37")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(3000);
    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 30000)

    await driver.navigate().refresh();
    await driver.sleep(3000);
    await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".card-body"))), 3000)
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "대기중")
    // //여기까지 전제조건
    assert(await driver.findElement(By.css("span")).getText() == "test title37")
    await driver.sleep(3000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).clear(); // 기존 텍스트를 클리어
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("Edit title37")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-07")
    await driver.findElement(By.id("modalSaveBtn")).click()
    await driver.sleep(3000);
    assert(await driver.switchTo().alert().getText() == "저장하시겠습니까?")
    await driver.sleep(3000);
    await driver.switchTo().alert().accept()
    await driver.sleep(3000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "대기중")
    await driver.sleep(1000);
    assert(await driver.findElement(By.css("span")).getText() == "Edit title37")
    await driver.navigate().refresh();
    await driver.sleep(3000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)

    vars["TitleValue"] = await driver.findElement(By.id("exampleModalLabel")).getAttribute("value")
    vars["ContentValue"] = await driver.findElement(By.id("ModalContent")).getAttribute("value")
    vars["DateValue"] = await driver.findElement(By.id("addDate")).getAttribute("value")
    await driver.sleep(2000);
    assert(vars["TitleValue"].toString() == "Edit title37")
    assert(vars["ContentValue"].toString() == "test content37")
    assert(vars["DateValue"].toString() == "2024-03-07")

    await driver.sleep(3000);
    await driver.findElement(By.css(".btn-close")).click()

    await driver.sleep(2000);
    //삭제 하기
    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000038', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title38")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).sendKeys("test content38")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(3000);
    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 30000)

    await driver.navigate().refresh();
    await driver.sleep(3000);
    await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".card-body"))), 3000)
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "대기중")
    // //여기까지 전제조건
    assert(await driver.findElement(By.css("span")).getText() == "test title38")
    await driver.sleep(3000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).clear()
    await driver.sleep(1000);
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("Edit title38")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).clear()
    await driver.findElement(By.id("ModalContent")).sendKeys("Edit content38")
    await driver.findElement(By.id("modalSaveBtn")).click()
    assert(await driver.switchTo().alert().getText() == "저장하시겠습니까?")
    await driver.switchTo().alert().accept()
    await driver.sleep(3000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "대기중")
    assert(await driver.findElement(By.css("span")).getText() == "Edit title38")
    await driver.navigate().refresh();
    await driver.sleep(3000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)

    vars["TitleValue"] = await driver.findElement(By.id("exampleModalLabel")).getAttribute("value")
    vars["ContentValue"] = await driver.findElement(By.id("ModalContent")).getAttribute("value")
    vars["DateValue"] = await driver.findElement(By.id("addDate")).getAttribute("value")
    assert(vars["TitleValue"].toString() == "Edit title38")
    assert(vars["ContentValue"].toString() == "Edit content38")
    assert(vars["DateValue"].toString() == "2024-03-06")
    await driver.sleep(3000);
    await driver.findElement(By.css(".btn-close")).click()

    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000039', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title39")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).sendKeys("test content39")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(2000);
    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 30000)

    await driver.navigate().refresh();
    await driver.sleep(3000);
    await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".card-body"))), 3000)
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "대기중")
    // //여기까지 전제조건
    assert(await driver.findElement(By.css("span")).getText() == "test title39")
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-07")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).clear()//기존 텍스트 클리어
    await driver.findElement(By.id("ModalContent")).sendKeys("Edit content39")
    await driver.findElement(By.id("modalSaveBtn")).click()
    assert(await driver.switchTo().alert().getText() == "저장하시겠습니까?")
    await driver.switchTo().alert().accept()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "대기중")
    assert(await driver.findElement(By.css("span")).getText() == "test title39")
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)

    vars["TitleValue"] = await driver.findElement(By.id("exampleModalLabel")).getAttribute("value")
    vars["ContentValue"] = await driver.findElement(By.id("ModalContent")).getAttribute("value")
    vars["DateValue"] = await driver.findElement(By.id("addDate")).getAttribute("value")
    assert(vars["TitleValue"].toString() == "test title39")
    assert(vars["ContentValue"].toString() == "Edit content39")
    assert(vars["DateValue"].toString() == "2024-03-07")
    await driver.sleep(2000);
    await driver.findElement(By.css(".btn-close")).click()
    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000040', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title40")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).sendKeys("test content40")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(2000);
    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 30000)
    await driver.navigate().refresh();
    await driver.sleep(3000);
    await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".card-body"))), 3000)
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "대기중")
    // //여기까지 전제조건
    assert(await driver.findElement(By.css("span")).getText() == "test title40")
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).clear()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("Edit title40")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-07")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).clear()
    await driver.findElement(By.id("ModalContent")).sendKeys("Edit content40")
    await driver.findElement(By.id("modalSaveBtn")).click()
    await driver.sleep(2000);
    assert(await driver.switchTo().alert().getText() == "저장하시겠습니까?")
    await driver.switchTo().alert().accept()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "대기중")
    assert(await driver.findElement(By.css("span")).getText() == "Edit title40")
    await driver.navigate().refresh();
    await driver.sleep(3000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)

    vars["TitleValue"] = await driver.findElement(By.id("exampleModalLabel")).getAttribute("value")
    vars["ContentValue"] = await driver.findElement(By.id("ModalContent")).getAttribute("value")
    vars["DateValue"] = await driver.findElement(By.id("addDate")).getAttribute("value")
    assert(vars["TitleValue"].toString() == "Edit title40")
    assert(vars["ContentValue"].toString() == "Edit content40")
    assert(vars["DateValue"].toString() == "2024-03-07")

    await driver.sleep(2000);
    await driver.findElement(By.css(".btn-close")).click()
    //삭제 하기
    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000041', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title41")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).sendKeys("test content41")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(2000);
    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 30000)

    await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".card-body"))), 3000)
    await driver.findElement(By.css(".dropdown-toggle")).click()
    await driver.findElement(By.linkText("진행중")).click()
    await driver.sleep(2000);
    // //여기까지 전제조건
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "진행중")
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)

    vars["TitleValue"] = await driver.findElement(By.id("exampleModalLabel")).getAttribute("value")
    vars["ContentValue"] = await driver.findElement(By.id("ModalContent")).getAttribute("value")
    vars["DateValue"] = await driver.findElement(By.id("addDate")).getAttribute("value")
    assert(vars["TitleValue"].toString() == "test title41")
    assert(vars["ContentValue"].toString() == "test content41")
    assert(vars["DateValue"].toString() == "2024-03-06")

    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).clear()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("Edit title41")
    await driver.findElement(By.id("modalSaveBtn")).click()
    await driver.sleep(2000);
    assert(await driver.switchTo().alert().getText() == "저장하시겠습니까?")
    await driver.switchTo().alert().accept()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "진행중")
    assert(await driver.findElement(By.css("span")).getText() == "Edit title41")
    await driver.navigate().refresh();
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)

    vars["ChangeTitleValue"] = await driver.findElement(By.id("exampleModalLabel")).getAttribute("value")
    assert(vars["ChangeTitleValue"].toString() == "Edit title41")
    assert(vars["ContentValue"].toString() == "test content41")
    assert(vars["DateValue"].toString() == "2024-03-06")
    await driver.sleep(2000);

    await driver.findElement(By.css(".btn-close")).click()
    //삭제 하기
    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000042', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title42")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).sendKeys("test content42")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(2000);
    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 30000)

    await driver.navigate().refresh();
    await driver.sleep(2000);
    await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".card-body"))), 3000)
    await driver.findElement(By.css(".dropdown-toggle")).click()
    await driver.findElement(By.linkText("진행중")).click()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "진행중")
    // //여기까지 전제조건
    assert(await driver.findElement(By.css("span")).getText() == "test title42")
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-07")
    await driver.findElement(By.id("modalSaveBtn")).click()
    assert(await driver.switchTo().alert().getText() == "저장하시겠습니까?")
    await driver.switchTo().alert().accept()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "진행중")
    assert(await driver.findElement(By.css("span")).getText() == "test title42")

    await driver.navigate().refresh();
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)

    vars["TitleValue"] = await driver.findElement(By.id("exampleModalLabel")).getAttribute("value")
    vars["ContentValue"] = await driver.findElement(By.id("ModalContent")).getAttribute("value")
    vars["DateValue"] = await driver.findElement(By.id("addDate")).getAttribute("value")
    assert(vars["TitleValue"].toString() == "test title42")
    assert(vars["ContentValue"].toString() == "test content42")
    assert(vars["DateValue"].toString() == "2024-03-07")
    await driver.sleep(2000);

    await driver.findElement(By.css(".btn-close")).click()
    //삭제 하기
    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000043', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title43")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).sendKeys("test content43")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(2000);
    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 30000)
    await driver.navigate().refresh();
    await driver.sleep(2000);
    await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".card-body"))), 3000)
    await driver.findElement(By.css(".dropdown-toggle")).click()
    await driver.findElement(By.linkText("진행중")).click()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "진행중")
    // //여기까지 전제조건
    assert(await driver.findElement(By.css("span")).getText() == "test title43")
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).clear()
    await driver.findElement(By.id("ModalContent")).sendKeys("Edit content43")
    await driver.findElement(By.id("modalSaveBtn")).click()
    assert(await driver.switchTo().alert().getText() == "저장하시겠습니까?")
    await driver.switchTo().alert().accept()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "진행중")
    assert(await driver.findElement(By.css("span")).getText() == "test title43")
    await driver.navigate().refresh();
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)

    vars["TitleValue"] = await driver.findElement(By.id("exampleModalLabel")).getAttribute("value")
    vars["ContentValue"] = await driver.findElement(By.id("ModalContent")).getAttribute("value")
    vars["DateValue"] = await driver.findElement(By.id("addDate")).getAttribute("value")
    assert(vars["TitleValue"].toString() == "test title43")
    assert(vars["ContentValue"].toString() == "Edit content43")
    assert(vars["DateValue"].toString() == "2024-03-06")
    await driver.sleep(2000);

    await driver.findElement(By.css(".btn-close")).click()
    //삭제 하기
    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000044', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title44")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).sendKeys("test content44")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(2000);
    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 30000)
    await driver.navigate().refresh();
    await driver.sleep(2000);
    await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".card-body"))), 3000)
    await driver.findElement(By.css(".dropdown-toggle")).click()
    await driver.findElement(By.linkText("진행중")).click()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "진행중")
    // //여기까지 전제조건
    assert(await driver.findElement(By.css("span")).getText() == "test title44")
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).clear()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("Edit title44")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-07")
    await driver.findElement(By.id("modalSaveBtn")).click()
    assert(await driver.switchTo().alert().getText() == "저장하시겠습니까?")
    await driver.switchTo().alert().accept()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "진행중")
    assert(await driver.findElement(By.css("span")).getText() == "Edit title44")
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)

    vars["TitleValue"] = await driver.findElement(By.id("exampleModalLabel")).getAttribute("value")
    vars["ContentValue"] = await driver.findElement(By.id("ModalContent")).getAttribute("value")
    vars["DateValue"] = await driver.findElement(By.id("addDate")).getAttribute("value")
    assert(vars["TitleValue"].toString() == "Edit title44")
    assert(vars["ContentValue"].toString() == "test content44")
    assert(vars["DateValue"].toString() == "2024-03-07")
    await driver.sleep(2000);

    await driver.findElement(By.css(".btn-close")).click()
    //삭제 하기
    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000045', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title45")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).sendKeys("test content45")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(2000);
    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 30000)

    await driver.navigate().refresh();
    await driver.sleep(2000);
    await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".card-body"))), 3000)
    await driver.findElement(By.css("button.btn.dropdown-toggle")).click()
    await driver.findElement(By.linkText("진행중")).click()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css("button.btn.dropdown-toggle")).getText() == "진행중")
    // //여기까지 전제조건
    assert(await driver.findElement(By.css("span")).getText() == "test title45")
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).clear()
    await driver.sleep(1000);
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("Edit title45")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).clear()
    await driver.findElement(By.id("ModalContent")).sendKeys("Edit content45")
    await driver.findElement(By.id("modalSaveBtn")).click()
    assert(await driver.switchTo().alert().getText() == "저장하시겠습니까?")
    await driver.switchTo().alert().accept()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css("button.btn.dropdown-toggle")).getText() == "진행중")
    assert(await driver.findElement(By.css("span")).getText() == "Edit title45")
    await driver.navigate().refresh();
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    vars["TitleValue"] = await driver.findElement(By.id("exampleModalLabel")).getAttribute("value")
    vars["ContentValue"] = await driver.findElement(By.id("ModalContent")).getAttribute("value")
    vars["DateValue"] = await driver.findElement(By.id("addDate")).getAttribute("value")
    assert(vars["TitleValue"].toString() == "Edit title45")
    assert(vars["ContentValue"].toString() == "Edit content45")
    assert(vars["DateValue"].toString() == "2024-03-06")
    await driver.sleep(2000);
    await driver.findElement(By.css(".btn-close")).click()
    //삭제 하기
    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000046', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title46")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).sendKeys("test content46")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(2000);

    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 30000)
    await driver.navigate().refresh();
    await driver.sleep(2000);
    await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".card-body"))), 3000)
    await driver.findElement(By.css(".dropdown-toggle")).click()
    await driver.findElement(By.linkText("진행중")).click()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "진행중")
    // //여기까지 전제조건
    assert(await driver.findElement(By.css("span")).getText() == "test title46")
    await driver.navigate().refresh();
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-07")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).clear()
    await driver.findElement(By.id("ModalContent")).sendKeys("Edit content46")
    await driver.findElement(By.id("modalSaveBtn")).click()
    assert(await driver.switchTo().alert().getText() == "저장하시겠습니까?")
    await driver.switchTo().alert().accept()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "진행중")
    assert(await driver.findElement(By.css("span")).getText() == "test title46")
    await driver.navigate().refresh();
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)

    vars["TitleValue"] = await driver.findElement(By.id("exampleModalLabel")).getAttribute("value")
    vars["ContentValue"] = await driver.findElement(By.id("ModalContent")).getAttribute("value")
    vars["DateValue"] = await driver.findElement(By.id("addDate")).getAttribute("value")
    assert(vars["TitleValue"].toString() == "test title46")
    assert(vars["ContentValue"].toString() == "Edit content46")
    assert(vars["DateValue"].toString() == "2024-03-07")

    await driver.sleep(2000);
    await driver.findElement(By.css(".btn-close")).click()
    //삭제 하기
    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000047', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title47")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).sendKeys("test content47")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(2000);
    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 30000)
    await driver.navigate().refresh();
    await driver.sleep(2000);
    await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".card-body"))), 3000)
    await driver.findElement(By.css(".dropdown-toggle")).click()
    await driver.findElement(By.linkText("진행중")).click()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "진행중")
    // //여기까지 전제조건
    assert(await driver.findElement(By.css("span")).getText() == "test title47")
    await driver.navigate().refresh();
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).clear()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("Edit title47")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-07")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).clear()
    await driver.findElement(By.id("ModalContent")).sendKeys("Edit content47")
    await driver.findElement(By.id("modalSaveBtn")).click()
    assert(await driver.switchTo().alert().getText() == "저장하시겠습니까?")
    await driver.switchTo().alert().accept()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "진행중")
    assert(await driver.findElement(By.css("span")).getText() == "Edit title47")
    await driver.navigate().refresh();
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)

    vars["TitleValue"] = await driver.findElement(By.id("exampleModalLabel")).getAttribute("value")
    vars["ContentValue"] = await driver.findElement(By.id("ModalContent")).getAttribute("value")
    vars["DateValue"] = await driver.findElement(By.id("addDate")).getAttribute("value")
    assert(vars["TitleValue"].toString() == "Edit title47")
    assert(vars["ContentValue"].toString() == "Edit content47")
    assert(vars["DateValue"].toString() == "2024-03-07")

    await driver.sleep(2000);
    await driver.findElement(By.css(".btn-close")).click()
    //삭제하기
    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000048', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title48")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).sendKeys("test content48")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(2000);
    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 30000)
    await driver.navigate().refresh();
    await driver.sleep(2000);
    await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".card-body"))), 3000)
    await driver.findElement(By.css(".dropdown-toggle")).click()
    await driver.findElement(By.linkText("완료")).click()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "완료")
    // //여기까지 전제조건
    assert(await driver.findElement(By.css("span")).getText() == "test title48")
    await driver.navigate().refresh();
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".card:nth-child(1) .btn-right > .btn-primary")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)

    vars["TitleValue"] = await driver.findElement(By.id("exampleModalLabel")).getAttribute("value")
    vars["ContentValue"] = await driver.findElement(By.id("ModalContent")).getAttribute("value")
    vars["DateValue"] = await driver.findElement(By.id("addDate")).getAttribute("value")
    assert(vars["TitleValue"].toString() == "test title48")
    assert(vars["ContentValue"].toString() == "test content48")
    assert(vars["DateValue"].toString() == "2024-03-06")

    await driver.sleep(2000);
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).clear()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("Edit title48")
    await driver.findElement(By.id("modalSaveBtn")).click()
    assert(await driver.switchTo().alert().getText() == "저장하시겠습니까?")
    await driver.switchTo().alert().accept()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "완료")
    assert(await driver.findElement(By.css("span")).getText() == "Edit title48")
    await driver.navigate().refresh();
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".card:nth-child(1) .btn-right > .btn-primary")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)

    vars["ChangeTitleValue"] = await driver.findElement(By.id("exampleModalLabel")).getAttribute("value")
    assert(vars["ChangeTitleValue"].toString() == "Edit title48")
    assert(vars["ContentValue"].toString() == "test content48")
    assert(vars["DateValue"].toString() == "2024-03-06")
    
    await driver.sleep(2000);
    await driver.findElement(By.css(".btn-close")).click()
    //삭제하기
    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000049', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title49")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).sendKeys("test content49")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(2000);
    
    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 30000)
    await driver.navigate().refresh();
    await driver.sleep(2000);
    await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".card-body"))), 3000)
    await driver.findElement(By.css(".dropdown-toggle")).click()
    await driver.findElement(By.linkText("완료")).click()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "완료")
    // //여기까지 전제조건
    assert(await driver.findElement(By.css("span")).getText() == "test title49")
    await driver.navigate().refresh();
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".card:nth-child(1) .btn-right > .btn-primary")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-07")
    await driver.findElement(By.id("modalSaveBtn")).click()
    assert(await driver.switchTo().alert().getText() == "저장하시겠습니까?")
    await driver.switchTo().alert().accept()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "완료")
    assert(await driver.findElement(By.css("span")).getText() == "test title49")
    
    await driver.navigate().refresh();
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".card:nth-child(1) .btn-right > .btn-primary")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)

    vars["TitleValue"] = await driver.findElement(By.id("exampleModalLabel")).getAttribute("value")
    vars["ContentValue"] = await driver.findElement(By.id("ModalContent")).getAttribute("value")
    vars["DateValue"] = await driver.findElement(By.id("addDate")).getAttribute("value")
    assert(vars["TitleValue"].toString() == "test title49")
    assert(vars["ContentValue"].toString() == "test content49")
    assert(vars["DateValue"].toString() == "2024-03-07")

    await driver.sleep(2000);
    await driver.findElement(By.css(".btn-close")).click()
    //삭제 하기
    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000050', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title50")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).sendKeys("test content50")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(2000);
    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 30000)
    await driver.navigate().refresh();
    await driver.sleep(2000);
    await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".card-body"))), 3000)
    await driver.findElement(By.css(".dropdown-toggle")).click()
    await driver.findElement(By.linkText("완료")).click()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "완료")
    // //여기까지 전제조건
    assert(await driver.findElement(By.css("span")).getText() == "test title50")
    await driver.navigate().refresh();
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".card:nth-child(1) .btn-right > .btn-primary")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).clear()
    await driver.findElement(By.id("ModalContent")).sendKeys("Edit content50")
    await driver.findElement(By.id("modalSaveBtn")).click()
    assert(await driver.switchTo().alert().getText() == "저장하시겠습니까?")
    await driver.switchTo().alert().accept()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "완료")
    assert(await driver.findElement(By.css("span")).getText() == "test title50")
    await driver.navigate().refresh();
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".card:nth-child(1) .btn-right > .btn-primary")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)

    vars["TitleValue"] = await driver.findElement(By.id("exampleModalLabel")).getAttribute("value")
    vars["ContentValue"] = await driver.findElement(By.id("ModalContent")).getAttribute("value")
    vars["DateValue"] = await driver.findElement(By.id("addDate")).getAttribute("value")
    assert(vars["TitleValue"].toString() == "test title50")
    assert(vars["ContentValue"].toString() == "Edit content50")
    assert(vars["DateValue"].toString() == "2024-03-06")

    await driver.sleep(2000);
    await driver.findElement(By.css(".btn-close")).click()
    //삭제 하기
    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000051', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title51")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).sendKeys("test content51")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(2000);
    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 30000)
    await driver.navigate().refresh();
    await driver.sleep(2000);
    await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".card-body"))), 3000)
    await driver.findElement(By.css(".dropdown-toggle")).click()
    await driver.findElement(By.linkText("완료")).click()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "완료")
    // //여기까지 전제조건
    assert(await driver.findElement(By.css("span")).getText() == "test title51")
    await driver.navigate().refresh();
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".card:nth-child(1) .btn-right > .btn-primary")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).clear()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("Edit title51")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-07")
    await driver.findElement(By.id("modalSaveBtn")).click()
    assert(await driver.switchTo().alert().getText() == "저장하시겠습니까?")
    await driver.switchTo().alert().accept()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "완료")
    assert(await driver.findElement(By.css("span")).getText() == "Edit title51")
    await driver.navigate().refresh();
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".card:nth-child(1) .btn-right > .btn-primary")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)

    vars["TitleValue"] = await driver.findElement(By.id("exampleModalLabel")).getAttribute("value")
    vars["ContentValue"] = await driver.findElement(By.id("ModalContent")).getAttribute("value")
    vars["DateValue"] = await driver.findElement(By.id("addDate")).getAttribute("value")
    assert(vars["TitleValue"].toString() == "Edit title51")
    assert(vars["ContentValue"].toString() == "test content51")
    assert(vars["DateValue"].toString() == "2024-03-07")

    await driver.sleep(2000);
    await driver.findElement(By.css(".btn-close")).click()
    //삭제 하기
    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000052', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title52")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).sendKeys("test content52")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(2000);

    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 30000)
    await driver.navigate().refresh();
    await driver.sleep(2000);

    await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".card-body"))), 3000)
    await driver.findElement(By.css(".dropdown-toggle")).click()
    await driver.findElement(By.linkText("완료")).click()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "완료")
    // //여기까지 전제조건
    assert(await driver.findElement(By.css("span")).getText() == "test title52")
    await driver.navigate().refresh();
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".card:nth-child(1) .btn-right > .btn-primary")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).clear()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("Edit title52")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).clear()
    await driver.findElement(By.id("ModalContent")).sendKeys("Edit content52")
    await driver.findElement(By.id("modalSaveBtn")).click()
    assert(await driver.switchTo().alert().getText() == "저장하시겠습니까?")
    await driver.switchTo().alert().accept()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "완료")
    assert(await driver.findElement(By.css("span")).getText() == "Edit title52")
    
    await driver.navigate().refresh();
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".card:nth-child(1) .btn-right > .btn-primary")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)

    vars["TitleValue"] = await driver.findElement(By.id("exampleModalLabel")).getAttribute("value")
    vars["ContentValue"] = await driver.findElement(By.id("ModalContent")).getAttribute("value")
    vars["DateValue"] = await driver.findElement(By.id("addDate")).getAttribute("value")
    assert(vars["TitleValue"].toString() == "Edit title52")
    assert(vars["ContentValue"].toString() == "Edit content52")
    assert(vars["DateValue"].toString() == "2024-03-06")

    await driver.sleep(2000);
    await driver.findElement(By.css(".btn-close")).click()
    //삭제 하기
    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000053', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title53")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).sendKeys("test content53")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(2000);

    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 30000)
    await driver.navigate().refresh();
    await driver.sleep(2000);

    await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".card-body"))), 3000)
    await driver.findElement(By.css(".dropdown-toggle")).click()
    await driver.findElement(By.linkText("완료")).click()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "완료")
    // //여기까지 전제조건
    assert(await driver.findElement(By.css("span")).getText() == "test title53")
    await driver.navigate().refresh();
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".card:nth-child(1) .btn-right > .btn-primary")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-07")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).clear()
    await driver.findElement(By.id("ModalContent")).sendKeys("Edit content53")
    await driver.findElement(By.id("modalSaveBtn")).click()
    assert(await driver.switchTo().alert().getText() == "저장하시겠습니까?")
    await driver.switchTo().alert().accept()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "완료")
    assert(await driver.findElement(By.css("span")).getText() == "test title53")

    await driver.navigate().refresh();
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".card:nth-child(1) .btn-right > .btn-primary")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)

    vars["TitleValue"] = await driver.findElement(By.id("exampleModalLabel")).getAttribute("value")
    vars["ContentValue"] = await driver.findElement(By.id("ModalContent")).getAttribute("value")
    vars["DateValue"] = await driver.findElement(By.id("addDate")).getAttribute("value")
    assert(vars["TitleValue"].toString() == "test title53")
    assert(vars["ContentValue"].toString() == "Edit content53")
    assert(vars["DateValue"].toString() == "2024-03-07")

    await driver.sleep(2000);
    await driver.findElement(By.css(".btn-close")).click()
    //삭제 하기
    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
  it('TC00000054', async function() {
    await driver.findElement(By.css(".bi-pencil-fill")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("test title54")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-06")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).sendKeys("test content54")
    await driver.findElement(By.id("modalSaveBtn")).click()

    await driver.navigate().refresh();
    await driver.sleep(2000);

    await driver.wait(until.elementTextIs(await driver.findElement(By.css(".title")), 'To do list'), 30000)
    await driver.navigate().refresh();
    await driver.sleep(2000);


    await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".card-body"))), 3000)
    await driver.findElement(By.css(".dropdown-toggle")).click()
    await driver.findElement(By.linkText("완료")).click()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "완료")
    // //여기까지 전제조건
    assert(await driver.findElement(By.css("span")).getText() == "test title54")
    await driver.navigate().refresh();
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".card:nth-child(1) .btn-right > .btn-primary")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)
    await driver.findElement(By.id("exampleModalLabel")).click()
    await driver.findElement(By.id("exampleModalLabel")).clear()
    await driver.findElement(By.id("exampleModalLabel")).sendKeys("Edit title54")
    await driver.findElement(By.id("addDate")).click()
    await driver.findElement(By.id("addDate")).sendKeys("002024-03-07")
    await driver.findElement(By.id("ModalContent")).click()
    await driver.findElement(By.id("ModalContent")).clear()
    await driver.findElement(By.id("ModalContent")).sendKeys("Edit content54")
    await driver.findElement(By.id("modalSaveBtn")).click()
    assert(await driver.switchTo().alert().getText() == "저장하시겠습니까?")
    await driver.switchTo().alert().accept()
    await driver.sleep(2000);
    assert(await driver.findElement(By.css(".dropdown-toggle")).getText() == "완료")
    assert(await driver.findElement(By.css("span")).getText() == "Edit title54")
    await driver.navigate().refresh();
    await driver.sleep(2000);
    // //수정 버튼 클릭
    await driver.findElement(By.css(".card:nth-child(1) .btn-right > .btn-primary")).click()
    // //모달 표시되는지
    await driver.wait(until.elementIsVisible(await driver.findElement(By.id("exampleModalLabel"))), 3000)

    vars["TitleValue"] = await driver.findElement(By.id("exampleModalLabel")).getAttribute("value")
    vars["ContentValue"] = await driver.findElement(By.id("ModalContent")).getAttribute("value")
    vars["DateValue"] = await driver.findElement(By.id("addDate")).getAttribute("value")
    assert(vars["TitleValue"].toString() == "Edit title54")
    assert(vars["ContentValue"].toString() == "Edit content54")
    assert(vars["DateValue"].toString() == "2024-03-07")

    await driver.sleep(2000);
    await driver.findElement(By.css(".btn-close")).click()
    //삭제 하기
    await driver.findElement(By.name("deleteBtn")).click()
    assert(await driver.switchTo().alert().getText() == "삭제하시겠습니까?")
    await driver.switchTo().alert().accept()
  })
})
